// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENTERPRISE MODELS

// Organization model for multi-user support
model Organization {
  id           String            @id @default(cuid())
  name         String
  slug         String            @unique
  type         OrganizationType  @default(INDIVIDUAL_LANDLORD)
  logo         String?
  address      String?
  phone        String?
  email        String?
  website      String?
  settings     Json?             // Organization preferences
  subscription SubscriptionTier @default(BASIC)
  maxUsers     Int               @default(5)
  maxProperties Int              @default(50)
  ownerId      String            // Primary owner/admin
  isActive     Boolean           @default(true)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  // Relations
  users        User[]
  properties   Property[]
  roles        Role[]
  userRoles    UserRole[]
  assignments  Assignment[]
  auditLogs    AuditLog[]

  @@map("organizations")
}

// Enhanced User model with organization support
model User {
  id             String    @id @default(cuid())
  email          String    @unique
  password       String
  firstName      String
  lastName       String
  phone          String?
  avatar         String?
  organizationId String?   // Nullable for individual users
  tier           UserTier  @default(FREE) // Individual tier (for non-org users)
  isActive       Boolean   @default(true)
  lastLogin      DateTime?
  preferences    Json?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  organization     Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  userRoles        UserRole[]
  assignments      Assignment[]
  properties       Property[]    // For individual ownership
  expenses         Expense[]
  reminders        Reminder[]
  createdAuditLogs AuditLog[]    @relation("CreatedBy")

  @@map("users")
}

// Role-Based Access Control
model Role {
  id             String   @id @default(cuid())
  name           String
  description    String?
  permissions    Json     // Detailed permissions object
  level          Int      // Hierarchy level (1=lowest, 10=highest)
  organizationId String?
  isSystemRole   Boolean  @default(false) // Built-in vs custom roles
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  // Relations
  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userRoles    UserRole[]

  @@map("roles")
}

model UserRole {
  id             String    @id @default(cuid())
  userId         String
  roleId         String
  organizationId String
  assignedAt     DateTime  @default(now())
  assignedBy     String    // User who assigned this role
  expiresAt      DateTime? // Optional expiration
  isActive       Boolean   @default(true)

  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role         Role         @relation(fields: [roleId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId, organizationId])
  @@map("user_roles")
}

// Property Assignment System
model Assignment {
  id             String         @id @default(cuid())
  userId         String
  propertyId     String
  roleType       AssignmentRole @default(MANAGER)
  permissions    Json?          // Specific permissions for this assignment
  assignedAt     DateTime       @default(now())
  assignedBy     String         // User who made the assignment
  isActive       Boolean        @default(true)
  organizationId String
  
  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  property     Property     @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, propertyId])
  @@map("assignments")
}

// Enhanced Property model with organization support
model Property {
  id             String         @id @default(cuid())
  address        String
  city           String
  state          String
  zipCode        String
  type           PropertyType   @default(SINGLE_FAMILY)
  bedrooms       Int?
  bathrooms      Float?
  squareFeet     Int?
  purchasePrice  Float?
  currentValue   Float?
  mortgage       Float?
  status         PropertyStatus @default(ACTIVE)
  organizationId String?        // For organization-owned properties
  ownerId        String?        // For individual-owned properties
  managerId      String?        // Assigned property manager
  insurance      PropertyInsurance?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  // Relations
  organization     Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  owner            User?         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  assignments      Assignment[]
  leases           Lease[]
  expenses         Expense[]
  maintenanceTasks MaintenanceTask[]
  reminders        Reminder[]

  @@map("properties")
}

// Audit Trail System
model AuditLog {
  id             String    @id @default(cuid())
  entityType     String    // Property, Lease, Payment, etc.
  entityId       String    // ID of the affected entity
  action         String    // CREATE, UPDATE, DELETE, etc.
  oldValues      Json?     // Previous state
  newValues      Json?     // New state
  userId         String    // Who made the change
  organizationId String
  ipAddress      String?
  userAgent      String?
  timestamp      DateTime  @default(now())

  // Relations
  user         User         @relation("CreatedBy", fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("audit_logs")
}

// Insurance tracking
model PropertyInsurance {
  id              String   @id @default(cuid())
  provider        String
  policyNumber    String
  premium         Float
  deductible      Float
  coverageAmount  Float
  startDate       DateTime
  endDate         DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Foreign Keys
  propertyId      String   @unique
  property        Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@map("property_insurance")
}

// Tenant model
model Tenant {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String
  phone     String
  emergencyContact String?
  emergencyPhone   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  leases    Lease[]

  @@map("tenants")
}

// Lease model
model Lease {
  id           String      @id @default(cuid())
  startDate    DateTime
  endDate      DateTime
  monthlyRent  Float
  securityDeposit Float
  status       LeaseStatus @default(ACTIVE)
  terms        String?     // Additional lease terms
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Foreign Keys
  propertyId   String
  property     Property    @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  tenantId     String
  tenant       Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  payments     Payment[]
  reminders    Reminder[]

  @@map("leases")
}

// Payment tracking
model Payment {
  id          String      @id @default(cuid())
  amount      Float
  dueDate     DateTime
  paidDate    DateTime?
  paymentType PaymentType @default(RENT)
  status      PaymentStatus @default(PENDING)
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Foreign Keys
  leaseId     String
  lease       Lease       @relation(fields: [leaseId], references: [id], onDelete: Cascade)

  @@map("payments")
}

// Expense tracking
model Expense {
  id          String       @id @default(cuid())
  description String
  amount      Float
  category    ExpenseCategory
  date        DateTime
  receipt     String?      // File path to receipt image
  notes       String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Foreign Keys
  propertyId  String?
  property    Property?    @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("expenses")
}

// Maintenance task tracking
model MaintenanceTask {
  id          String            @id @default(cuid())
  title       String
  description String
  priority    TaskPriority      @default(MEDIUM)
  status      TaskStatus        @default(PENDING)
  dueDate     DateTime?
  completedDate DateTime?
  estimatedCost Float?
  actualCost    Float?
  vendorName    String?
  vendorContact String?
  photos        String[]         // Array of photo file paths
  notes         String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Foreign Keys
  propertyId  String
  property    Property          @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@map("maintenance_tasks")
}

// Reminder system
model Reminder {
  id          String       @id @default(cuid())
  title       String
  description String?
  type        ReminderType
  dueDate     DateTime
  isCompleted Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Foreign Keys
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  propertyId  String?
  property    Property?    @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  leaseId     String?
  lease       Lease?       @relation(fields: [leaseId], references: [id], onDelete: Cascade)

  @@map("reminders")
}

// ENUMS

// Enterprise-specific enums
enum OrganizationType {
  INDIVIDUAL_LANDLORD
  PROPERTY_MANAGEMENT
  REAL_ESTATE_COMPANY
  INVESTMENT_FIRM
  OTHER
}

enum SubscriptionTier {
  BASIC
  PROFESSIONAL
  ENTERPRISE
  CUSTOM
}

enum AssignmentRole {
  VIEWER
  COORDINATOR
  MANAGER
  ADMIN
  OWNER
}

enum PropertyStatus {
  ACTIVE
  INACTIVE
  UNDER_MANAGEMENT
  FOR_SALE
  MAINTENANCE
}

// Existing enums
enum UserTier {
  FREE
  BASIC
  PREMIUM
}

enum PropertyType {
  SINGLE_FAMILY
  DUPLEX
  CONDO
  TOWNHOUSE
  APARTMENT
  OTHER
}

enum LeaseStatus {
  ACTIVE
  EXPIRED
  TERMINATED
  PENDING
}

enum PaymentType {
  RENT
  SECURITY_DEPOSIT
  PET_DEPOSIT
  LATE_FEE
  OTHER
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  PARTIAL
}

enum ExpenseCategory {
  MAINTENANCE
  REPAIRS
  UTILITIES
  INSURANCE
  PROPERTY_TAX
  MANAGEMENT_FEE
  MARKETING
  LEGAL
  ACCOUNTING
  SUPPLIES
  OTHER
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ReminderType {
  RENT_DUE
  LEASE_EXPIRING
  INSURANCE_RENEWAL
  MAINTENANCE_DUE
  PROPERTY_TAX
  INSPECTION
  OTHER
}
