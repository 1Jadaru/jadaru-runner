name: Frontend Tests

on:
  push:
    branches: [ main, develop ]
    paths: [ 'client/**' ]
  pull_request:
    branches: [ main, develop ]
    paths: [ 'client/**' ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: client/package-lock.json

    - name: Install dependencies
      working-directory: ./client
      run: npm ci

    - name: Run ESLint
      working-directory: ./client
      run: npm run lint

    - name: Run TypeScript type check
      working-directory: ./client
      run: npx tsc --noEmit

    - name: Run unit tests
      working-directory: ./client
      run: npm run test:unit

    - name: Run integration tests
      working-directory: ./client
      run: npm run test:integration

    - name: Run all tests with coverage
      working-directory: ./client
      run: npm run test:coverage

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ./client/coverage
        flags: frontend
        name: codecov-frontend

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.node-version }}
        path: |
          client/coverage/
          client/test-results.xml

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: client/package-lock.json

    - name: Install dependencies
      working-directory: ./client
      run: npm ci

    - name: Build application
      working-directory: ./client
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: client/dist/

  e2e:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: client/package-lock.json

    - name: Install dependencies
      working-directory: ./client
      run: npm ci

    - name: Install Playwright
      working-directory: ./client
      run: npx playwright install --with-deps

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: client/dist/

    - name: Start application
      working-directory: ./client
      run: |
        npm run preview &
        npx wait-on http://localhost:4173

    - name: Run E2E tests
      working-directory: ./client
      run: npx playwright test

    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-results
        path: client/test-results/

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: client/package-lock.json

    - name: Install dependencies
      working-directory: ./client
      run: npm ci

    - name: Run security audit
      working-directory: ./client
      run: npm audit --audit-level=moderate

    - name: Check for known vulnerabilities
      working-directory: ./client
      run: |
        npx audit-ci --moderate
        
  accessibility:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: client/package-lock.json

    - name: Install dependencies
      working-directory: ./client
      run: npm ci

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: client/dist/

    - name: Run accessibility tests
      working-directory: ./client
      run: |
        npm run preview &
        npx wait-on http://localhost:4173
        npx @axe-core/cli http://localhost:4173 --save accessibility-report.json

    - name: Upload accessibility report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: accessibility-report
        path: client/accessibility-report.json
